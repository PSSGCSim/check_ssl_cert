#/usr/bin/env bash

_check_ssl_cert() {

    local cur prev opts

    COMPREPLY=()

 	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"

    # list of command line options
    #   we list only the long version (more readable)
	opts="--file --host --noauth --all --all-local --allow-empty-san --clientcert --critical"

    if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]]; then
 		COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    # options with arguments
    case "${prev}" in
        # options with files as argument
        -f|--file|-C|--clientcert)
            _filedir
            ;;
        -H|--host)
            echo TODO
            ;;
    esac

# 13:
# 14: 	case "${prev}" in
# 15: 		-X|--package-names)
# 16: 			_pkgname -I ${cur}
# 17: 			;;
# 18: 		--soname)
# 19: 			local sonames=$(for x in /lib/*.so?(.)* /usr/lib*/*.so\?(.)* ; do \
# 20: 						echo ${x##*/} ; \
# 21: 						done)
# 22: 			COMPREPLY=( $(compgen -W "${sonames}" -- ${cur}) )
# 23: 			;;
# 24: 		--soname-regexp)
# 25: 			COMPREPLY=()
# 26: 			;;
# 27: 		*)
# 28: 			if [[ ${COMP_LINE} == *" "@(-X|--package-names)* ]] ; then
# 29: 				_pkgname -I ${cur}
# 30: 				COMPREPLY=(${COMPREPLY[@]} $(compgen -W "${opts}"))
# 31: 			else
# 32: 				COMPREPLY=($(compgen -W "${opts} -- ${cur}"))
# 33: 			fi
# 34: 		;;
# 35: 	esac

# compgen: a builtin command that generates completions supporting most of the options of the complete command (ex. -W for word list, -d for directories) and filtering them based on what already has been typed by the user.



}

complete -F _check_ssl_cert check_ssl_cert
