#/usr/bin/env bash

_check_ssl_cert() {


    local cur prev opts

    COMPREPLY=()
 	cur="${COMP_WORDS[COMP_CWORD]}"
	prev="${COMP_WORDS[COMP_CWORD-1]}"
	opts="-f --file -H --host -A --noauth --all --all-local"

    if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]]; then
 		COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
        return 0
    fi

    case "${prev}" in
        --file|-f)
            echo FILE
            ;;
        --host|-H)
            echo HOST
            ;;
    esac

# 13:
# 14: 	case "${prev}" in
# 15: 		-X|--package-names)
# 16: 			_pkgname -I ${cur}
# 17: 			;;
# 18: 		--soname)
# 19: 			local sonames=$(for x in /lib/*.so?(.)* /usr/lib*/*.so\?(.)* ; do \
# 20: 						echo ${x##*/} ; \
# 21: 						done)
# 22: 			COMPREPLY=( $(compgen -W "${sonames}" -- ${cur}) )
# 23: 			;;
# 24: 		--soname-regexp)
# 25: 			COMPREPLY=()
# 26: 			;;
# 27: 		*)
# 28: 			if [[ ${COMP_LINE} == *" "@(-X|--package-names)* ]] ; then
# 29: 				_pkgname -I ${cur}
# 30: 				COMPREPLY=(${COMPREPLY[@]} $(compgen -W "${opts}"))
# 31: 			else
# 32: 				COMPREPLY=($(compgen -W "${opts} -- ${cur}"))
# 33: 			fi
# 34: 		;;
# 35: 	esac

# compgen: a builtin command that generates completions supporting most of the options of the complete command (ex. -W for word list, -d for directories) and filtering them based on what already has been typed by the user.



    # case "$1" in

    #     ########################################
    #     # Options without arguments

    #     -A | --noauth)
    #         NOAUTH=1
    #         shift
    #         ;;
    #     --all)
    #         ALL=1
    #         shift
    #         ;;
    #     --all-local)
    #         ALL_LOCAL=1
    #         shift
    #         ;;
    #     --allow-empty-san)
    #         REQUIRE_SAN=""
    #         shift
    #         ;;
    #     --altnames)
    #         ALTNAMES=1
    #         shift
    #         ;;
    #     --check-ciphers-warnings)
    #         CHECK_CIPHERS_WARNINGS=1
    #         shift
    #         ;;
    #     --crl)
    #         CRL=1
    #         shift
    #         ;;
    #     -d | --debug)
    #         DEBUG=$((DEBUG + 1))
    #         shift
    #         ;;
    #     --debug-cert)
    #         DEBUG_CERT=1
    #         shift
    #         ;;
    #     --debug-time)
    #         # start time
    #         DEBUG_TIME=$(date +%s)
    #         shift
    #         ;;
    #     -h | --help | -\?)
    #         usage
    #         ;;
    #     --first-element-only)
    #         FIRST_ELEMENT_ONLY=1
    #         shift
    #         ;;
    #     --force-dconv-date)
    #         FORCE_DCONV_DATE=1
    #         shift
    #         ;;
    #     --force-perl-date)
    #         FORCE_PERL_DATE=1
    #         shift
    #         ;;
    #     --http-use-get)
    #         HTTP_METHOD="GET"
    #         shift
    #         ;;
    #     --ignore-exp)
    #         NOEXP=1
    #         shift
    #         ;;
    #     --ignore-altnames)
    #         ALTNAMES=
    #         shift
    #         ;;
    #     --ignore-host-cn)
    #         COMMON_NAME=
    #         ALTNAMES=
    #         shift
    #         ;;
    #     --ignore-sig-alg)
    #         NOSIGALG=1
    #         shift
    #         ;;
    #     --ignore-sct)
    #         SCT=
    #         shift
    #         ;;
    #     --ignore-ssl-labs-cache)
    #         IGNORE_SSL_LABS_CACHE="&startNew=on"
    #         shift
    #         ;;
    #     --ignore-tls-renegotiation)
    #         IGNORE_TLS_RENEGOTIATION='1'
    #         shift
    #         ;;
    #     --info)
    #         INFO='1'
    #         shift
    #         ;;
    #     --no-perf)
    #         NO_PERF=1
    #         shift
    #         ;;
    #     --no-proxy)
    #         NO_PROXY=1
    #         shift
    #         ;;
    #     --no-proxy-s_client)
    #         NO_PROXY_S_CLIENT=1
    #         shift
    #         ;;
    #     --no-proxy-curl)
    #         NO_PROXY_CURL=1
    #         shift
    #         ;;
    #     --no-ssl2 | --no_ssl2)
    #         # we keep the old variant for compatibility
    #         SSL_VERSION_DISABLED="${SSL_VERSION_DISABLED} -no_ssl2"
    #         shift
    #         ;;
    #     --no-ssl3 | --no_ssl3)
    #         # we keep the old variant for compatibility
    #         SSL_VERSION_DISABLED="${SSL_VERSION_DISABLED} -no_ssl3"
    #         shift
    #         ;;
    #     --no-tls1 | --no_tls1)
    #         # we keep the old variant for compatibility
    #         SSL_VERSION_DISABLED="${SSL_VERSION_DISABLED} -no_tls1"
    #         shift
    #         ;;
    #     --no-tls1_1 | --no_tls1_1)
    #         # we keep the old variant for compatibility
    #         SSL_VERSION_DISABLED="${SSL_VERSION_DISABLED} -no_tls1_1"
    #         shift
    #         ;;
    #     --no-tls1_2 | --no_tls1_2)
    #         # we keep the old variant for compatibility
    #         SSL_VERSION_DISABLED="${SSL_VERSION_DISABLED} -no_tls1_2"
    #         shift
    #         ;;
    #     --no-tls1_3 | --no_tls1_3)
    #         # we keep the old variant for compatibility
    #         SSL_VERSION_DISABLED="${SSL_VERSION_DISABLED} -no_tls1_3"
    #         shift
    #         ;;
    #     -N | --host-cn)
    #         COMMON_NAME="__HOST__"
    #         shift
    #         ;;
    #     --prometheus)
    #         PROMETHEUS=1
    #         shift
    #         ;;
    #     --rsa)
    #         RSA=1
    #         shift
    #         ;;
    #     --require-no-ssl2)
    #         DISALLOWED_PROTOCOLS="${DISALLOWED_PROTOCOLS} SSLv2"
    #         shift
    #         ;;
    #     --require-no-ssl3)
    #         DISALLOWED_PROTOCOLS="${DISALLOWED_PROTOCOLS} SSLv3"
    #         shift
    #         ;;
    #     --require-no-tls1)
    #         DISALLOWED_PROTOCOLS="${DISALLOWED_PROTOCOLS} TLSv1.0"
    #         shift
    #         ;;
    #     --require-no-tls1_1)
    #         DISALLOWED_PROTOCOLS="${DISALLOWED_PROTOCOLS} TLSv1.1"
    #         shift
    #         ;;
    #     --require-ocsp-stapling)
    #         REQUIRE_OCSP_STAPLING=1
    #         shift
    #         ;;
    #     --require-san)
    #         REQUIRE_SAN=1
    #         shift
    #         ;;
    #     -s | --selfsigned)
    #         SELFSIGNED=1
    #         shift
    #         ;;
    #     --ecdsa)
    #         ECDSA=1
    #         shift
    #         ;;
    #     --ssl2)
    #         SSL_VERSION="-ssl2"
    #         shift
    #         ;;
    #     --ssl3)
    #         SSL_VERSION="-ssl3"
    #         shift
    #         ;;
    #     --tls1)
    #         SSL_VERSION="-tls1"
    #         shift
    #         ;;
    #     --tls1_1)
    #         SSL_VERSION="-tls1_1"
    #         shift
    #         ;;
    #     --tls1_2)
    #         SSL_VERSION="-tls1_2"
    #         shift
    #         ;;
    #     --tls1_3)
    #         SSL_VERSION="-tls1_3"
    #         shift
    #         ;;
    #     --ocsp)
    #         # deprecated
    #         shift
    #         ;;
    #     --ignore-incomplete-chain)
    #         IGNORE_INCOMPLETE_CHAIN=1
    #         shift
    #         ;;
    #     --ignore-ocsp)
    #         OCSP=""
    #         shift
    #         ;;
    #     --ignore-ocsp-errors)
    #         OCSP_IGNORE_ERRORS=1
    #         shift
    #         ;;
    #     --ignore-ocsp-timeout)
    #         OCSP_IGNORE_TIMEOUT=1
    #         shift
    #         ;;
    #     --terse)
    #         TERSE=1
    #         shift
    #         ;;
    #     -v | --verbose)
    #         VERBOSE=$((VERBOSE + 1))
    #         shift
    #         ;;
    #     -V | --version)
    #         echo "check_ssl_cert version ${VERSION}"
    #         exit "${STATUS_UNKNOWN}"
    #         ;;
    #     -4)
    #         INETPROTO="-4"
    #         shift
    #         ;;
    #     -6)
    #         INETPROTO="-6"
    #         shift
    #         ;;

    #     ########################################
    #     # Options with one argument

    #     -c | --critical)
    #         check_option_argument '-c,--critical' "$2"
    #         check_float "$2" "--critical: the number of days should be an integer or a float"
    #         CRITICAL_DAYS="$2"
    #         CRITICAL_SECONDS=$(days_to_seconds "${CRITICAL_DAYS}")
    #         shift 2
    #         ;;
    #     --check-ciphers)
    #         check_option_argument '--check-ciphers' "$2"
    #         CHECK_CIPHERS="$2"
    #         shift 2
    #         ;;
    #     --curl-bin)
    #         check_option_argument '--curl-bin' "$2"
    #         CURL_BIN="$2"
    #         shift 2
    #         ;;
    #     --curl-user-agent)
    #         check_option_argument '--curl-user-agent' "$2"
    #         CURL_USER_AGENT="$2"
    #         shift 2
    #         ;;
    #     --custom-http-header)
    #         check_option_argument '--custom-http-header' "$2"
    #         CUSTOM_HTTP_HEADER="$2"
    #         shift 2
    #         ;;
    #     --date)
    #         check_option_argument '--date' "$2"
    #         DATEBIN="$2"
    #         shift 2
    #         ;;
    #     # Deprecated option: used to be as --warning
    #     --days)
    #         check_option_argument '--days' "$2"
    #         check_integer "$2" "--days: the number of days should be an integer"
    #         WARNING_DAYS="$2"
    #         WARNING_SECONDS=$(days_to_seconds "${WARNING_DAYS}")
    #         shift 2
    #         ;;
    #     --debug-file)
    #         check_option_argument '--debug-file' "$2"
    #         DEBUG_FILE="$2"
    #         shift 2
    #         ;;
    #     --dig-bin)
    #         check_option_argument '--dig-bin' "$2"
    #         DIG_BIN="$2"
    #         shift 2
    #         ;;
    #     --inetproto)
    #         check_option_argument '--inetproto' "$2"
    #         INETPROTO="-$2"
    #         shift 2
    #         ;;
    #     --nmap-bin)
    #         check_option_argument '--nmap-bin' "$2"
    #         NMAP_BIN="$2"
    #         ;;
    #     -e | --email)
    #         check_option_argument 'e|--email' "$2"
    #         ADDR="$2"
    #         shift 2
    #         ;;
    #     -f | --file)
    #         check_option_argument ' -f|--file' "$2"
    #         FILE="$2"
    #         # remove _HOST_ from COMMON_NAME
    #         COMMON_NAME=$(echo "${COMMON_NAME}" | sed 's/__HOST__\ *//')
    #         ALTNAMES=
    #         shift 2
    #         ;;
    #     --file-bin)
    #         check_option_argument '--file-bin' "$2"
    #         FILE_BIN="$2"
    #         shift 2
    #         ;;
    #     --format)
    #         check_option_argument '--format' "$2"
    #         FORMAT="$2"
    #         shift 2
    #         ;;
    #     -H | --host)
    #         check_option_argument '-H|--host' "$2"
    #         HOST="$2"

    #         # remove http[s] from the input
    #         if echo "${HOST}" | grep -F -q '://'; then
    #             # try to remove the protocol (we do not consider URLs without
    #             # an authority (https://en.wikipedia.org/wiki/URL)
    #             debuglog "Stripping protocol and path from URL"
    #             HOST=$(echo "${HOST}" | sed 's/^[a-z]*:\/\///' | sed 's/\/.*//')
    #         fi

    #         # remove the trailing . from FQDN (otherwise the CN will not match)
    #         HOST=$(echo "${HOST}" | sed 's/[.]$//')

    #         shift 2
    #         ;;
    #     -i | --issuer)
    #         check_option_argument '-i|--issuer' "$2"
    #         ISSUER="$2"
    #         shift 2
    #         ;;
    #     --issuer-cert-cache)
    #         check_option_argument '--issuer-cert-cache' "$2"
    #         ISSUER_CERT_CACHE="$2"
    #         shift 2
    #         ;;
    #     -L | --check-ssl-labs)
    #         check_option_argument '-L|--check-ssl-labs' "$2"
    #         SSL_LAB_CRIT_ASSESSMENT="$2"
    #         shift 2
    #         ;;
    #     --check-ssl-labs-warn)
    #         check_option_argument '--check-ssl-labs-warn' "$2"
    #         SSL_LAB_WARN_ASSESTMENT="$2"
    #         shift 2
    #         ;;
    #     --serial)
    #         check_option_argument '--serial' "$2"
    #         SERIAL_LOCK="$2"
    #         shift 2
    #         ;;
    #     --element)
    #         check_option_argument '--element' "$2"
    #         ELEMENT="$2"
    #         shift 2
    #         ;;
    #     --skip-element)
    #         check_option_argument '--skip-element' "$2"
    #         if [ -z "${SKIP_ELEMENT}" ]; then
    #             SKIP_ELEMENT="$2"
    #         else
    #             SKIP_ELEMENT="${SKIP_ELEMENT}\\n$2"
    #         fi
    #         shift 2
    #         ;;
    #     --fingerprint)
    #         check_option_argument '--fingerprint' "$2"
    #         FINGERPRINT_LOCK="$2"
    #         shift 2
    #         ;;
    #     --long-output)
    #         check_option_argument '--long-output' "$2"
    #         LONG_OUTPUT_ATTR="$2"
    #         shift 2
    #         ;;
    #     -n | --cn)
    #         check_option_argument ' -n|--cn' "$2"
    #         if [ -z "${COMMON_NAME}" ]; then
    #             COMMON_NAME="${2}"
    #         else
    #             COMMON_NAME="${COMMON_NAME} ${2}"
    #         fi
    #         debuglog "--cn specified: COMMON_MANE = ${COMMON_NAME}"
    #         shift 2
    #         ;;
    #     --not-issued-by)
    #         check_option_argument '--not-issued-by' "$2"
    #         NOT_ISSUED_BY="$2"
    #         shift 2
    #         ;;
    #     --not-valid-longer-than)
    #         check_option_argument '--not-valid-longer-than' "$2"
    #         NOT_VALID_LONGER_THAN=$2
    #         shift 2
    #         ;;
    #     --ocsp-critical)
    #         check_option_argument '--ocsp-critical' "$2"
    #         OCSP_CRITICAL="$2"
    #         shift 2
    #         ;;
    #     --ocsp-warning)
    #         check_option_argument '--ocsp-warning' "$2"
    #         OCSP_WARNING="$2"
    #         shift 2
    #         ;;
    #     -o | --org)
    #         check_option_argument '-o|--org' "$2"
    #         ORGANIZATION="$2"
    #         shift 2
    #         ;;
    #     --openssl)
    #         check_option_argument '--openssl' "$2"
    #         OPENSSL="$2"
    #         shift 2
    #         ;;
    #     --password)
    #         check_option_argument '--password' "$2"
    #         PASSWORD_SOURCE="$2"
    #         shift 2
    #         ;;
    #     -p | --port)
    #         check_option_argument '-p|--port' "$2"
    #         PORT="$2"
    #         XMPPPORT="$2"
    #         shift 2
    #         ;;
    #     --precision)
    #         check_option_argument '--precision' "$2"
    #         check_integer "$2" "--precision: the precision should be an integer"
    #         SCALE="$2"
    #         shift 2
    #         ;;
    #     -P | --protocol)
    #         check_option_argument '-P|--protocol' "$2"
    #         PROTOCOL="$2"
    #         shift 2
    #         ;;
    #     --proxy)
    #         check_option_argument '--proxy' "$2"
    #         PROXY="$2"
    #         export http_proxy="$2"
    #         shift 2
    #         ;;
    #     --resolve)
    #         check_option_argument '--resolve' "$2"
    #         RESOLVE="$2"
    #         shift 2
    #         ;;
    #     -r | --rootcert)
    #         check_option_argument '-r|--rootcert' "$2"
    #         ROOT_CA="$2"
    #         shift 2
    #         ;;
    #     --rootcert-dir)
    #         check_option_argument '--rootcert-dir' "$2"
    #         ROOT_CA_DIR="$2"
    #         shift 2
    #         ;;
    #     --rootcert-file)
    #         check_option_argument '--rootcert-file' "$2"
    #         ROOT_CA_FILE="$2"
    #         shift 2
    #         ;;
    #     -C | --clientcert)
    #         check_option_argument '-C|--clientcert' "$2"
    #         CLIENT_CERT="$2"
    #         shift 2
    #         ;;
    #     -K | --clientkey)
    #         check_option_argument '-K|--clientkey' "$2"
    #         CLIENT_KEY="$2"
    #         shift 2
    #         ;;
    #     --clientpass)
    #         if [ $# -gt 1 ]; then
    #             CLIENT_PASS="$2"
    #             shift 2
    #         else
    #             unknown "--clientpass requires an argument"
    #         fi
    #         ;;
    #     --sni)
    #         check_option_argument '--sni' "$2"
    #         SNI="$2"
    #         shift 2
    #         ;;
    #     -S | --ssl)
    #         check_option_argument '' "$2"
    #         if [ "$2" = "2" ] || [ "$2" = "3" ]; then
    #             SSL_VERSION="-ssl${2}"
    #             shift 2
    #         else
    #             unknown "invalid argument for --ssl"
    #         fi
    #         ;;
    #     -t | --timeout)
    #         check_option_argument '-t|--timeout' "$2"
    #         check_integer "$2" "--timeout: the timeout should be an integer"
    #         TIMEOUT="$2"
    #         shift 2
    #         ;;
    #     --temp)
    #         check_option_argument '--temp' "$2"
    #         TMPDIR="$2"
    #         shift 2
    #         ;;
    #     -u | --url)
    #         check_option_argument '-u|--url' "$2"
    #         HTTP_REQUEST_URL="$2"
    #         shift 2
    #         ;;
    #     -w | --warning)
    #         check_option_argument '-w|--warning' "$2"
    #         check_float "$2" "--warning: the number of days should be an integer or a float"
    #         WARNING_DAYS="$2"
    #         WARNING_SECONDS=$(days_to_seconds "${WARNING_DAYS}")
    #         shift 2
    #         ;;
    #     --xmpphost)
    #         check_option_argument '--xmpphost' "$2"
    #         XMPPHOST="$2"
    #         shift 2
    #         ;;

    #     ##############################
    #     # Variable number of arguments
    #     --dane)

    #         if [ -n "${DANE}" ]; then
    #             unknown "--dane can be specified only once"
    #         fi

    #         # check the second parameter if it exist
    #         if [ $# -gt 1 ]; then

    #             # shellcheck disable=SC2295
    #             if [ "${2%${2#?}}"x = '-x' ]; then
    #                 DANE=1
    #                 shift
    #             else
    #                 DANE=$2
    #                 shift 2
    #             fi

    #         else

    #             DANE=1
    #             shift

    #         fi

    #         ;;

    #     --require-client-cert)

    #         REQUIRE_CLIENT_CERT=1

    #         # check the second optional parameter if it exist
    #         if [ $# -gt 1 ]; then
    #             # shellcheck disable=SC2295
    #             if [ "${2%${2#?}}"x = '-x' ]; then
    #                 shift
    #             else
    #                 REQUIRE_CLIENT_CERT_CAS=$2
    #                 shift 2
    #             fi
    #         else
    #             shift
    #         fi

    #         ;;

    #     --ignore-connection-problems)

    #         # default OK
    #         IGNORE_CONNECTION_STATE="${STATUS_OK}"

    #         # check the second optional parameter if it exist
    #         if [ $# -gt 1 ]; then
    #             # shellcheck disable=SC2295
    #             if [ "${2%${2#?}}"x = '-x' ]; then
    #                 shift
    #             else
    #                 IGNORE_CONNECTION_STATE=$2
    #                 shift 2
    #             fi
    #         else
    #             shift
    #         fi

    #         ;;

    #     ########################################
    #     # Special
    #     --)
    #         shift
    #         break
    #         ;;
    #     -*)
    #         # we try to check for grouped variables
    #         OPTION="${1}"
    #         # if the option begins with a single dash and it's longer than one character
    #         OPTION_TMP="$(echo "${OPTION}" | wc -c | sed 's/\ //g')"
    #         if ! echo "${OPTION}" | grep -q -- '^--' &&
    #             [ "${OPTION_TMP}" -gt 3 ]; then
    #             if [ "${DEBUG}" -gt 0 ]; then
    #                 echo "[DBG]   unknown option ${OPTION}: splitting since it could be an option group"
    #             fi
    #             for letter in $(echo "${OPTION}" | sed 's/^-//' | grep -o .); do
    #                 parse_command_line_options "-${letter}"
    #             done
    #             shift
    #         else
    #             unknown "invalid option: ${1}"
    #         fi
    #         ;;
    #     *)
    #         if [ -n "$1" ]; then
    #             unknown "invalid option: ${1}"
    #         fi
    #         break
    #         ;;
    #     esac


}

complete -F _check_ssl_cert check_ssl_cert
